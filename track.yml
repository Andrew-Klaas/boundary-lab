slug: klaas-boundary-demo
id: belerrpnu1zl
version: 0.0.1
title: Klaas-(WIP) Test Boundary PKI Workers and Target Types (Unfinished)
teaser: (WIP) Boundary Demo env (NOT READY)
description: (WIP) Test Boundary PKI Workers and Target Types
icon: https://storage.googleapis.com/instruqt-hashicorp-tracks/logo/HashiCorp_Icon_Black.png
tags:
- Vault
- Boundary
owner: hashicorp
developers:
- aklaas@hashicorp.com
private: true
published: false
maintenance: true
challenges:
- slug: 01-boundary-worker-setup
  id: vhabntbdidpy
  type: challenge
  title: Configure Boundary and Vault
  teaser: Configure Vault to issue credentials for Boundary.
  notes:
  - type: text
    contents: Boundary provides a secure way to access hosts and critical systems
      without having to manage credentials or expose your network.
  assignment: |-
    ```
    export BOUNDARY_ADDR=
    ```

    ```
    export TF_VAR_boundary_addr=${BOUNDARY_ADDR}
    ```

    ```
    export ADMIN_USER=
    ```
    You will need to login to your Boundary cluster to get the initial auth method ID.
    Access the Boundary UI through the HCP portal (click into your Boundary Cluster)
    ```
    export TF_VAR_auth_method_id=
    ```

    ```
    boundary authenticate password -auth-method-id=${TF_VAR_auth_method_id} -login-name=$ADMIN_USER
    ```
    Set the BOundary Token
    ```
    export BOUNDARY_TOKEN=
    ```

    ```
    cd terraform-boundary/
    vault login -method=userpass username=vault password=vault
    export BOUNDARY_VAULT_TOKEN=$(vault token create \
      -no-default-policy=true \
      -policy="vault_admin" \
      -orphan=true \
      -period=20m \
      -renewable=true \
      -format=json | jq -r .auth.client_token)
    export TF_VAR_vault_token=${BOUNDARY_VAULT_TOKEN}
    terraform init -upgrade
    terraform init
    ```

    ```
    terraform apply --auto-approve;
    ```

    Set env variables for our project and targets
    ```
    export PROJECT_ID=$(terraform output -raw PROJECT_ID)
    export POSTGRES_TARGET_ID=$(terraform output -raw POSTGRES_TARGET_ID)
    export SSH_BROKERED_TARGET_ID=$(terraform output -raw SSH_BROKERED_TARGET_ID)
    export SSH_INJECTED_TARGET_ID=$(terraform output -raw SSH_INJECTED_TARGET_ID)
    export VAULT_TARGET_ID=$(terraform output -raw VAULT_TARGET_ID)
    export WORKER_TOKEN=$(terraform output -raw WORKER_TOKEN)
    echo $PROJECT_ID
    echo $POSTGRES_TARGET_ID
    echo $SSH_BROKERED_TARGET_ID
    echo $SSH_INJECTED_TARGET_ID
    echo $VAULT_TARGET_ID
    ```

    Grab the Worker_token from the output.
    Also grab the ID of your Boundary SaaS Cluster. It is the UUID in the address you copied from the portal.
    ```
    echo $BOUNDARY_ADDR | awk -F/ '{print $3}' |  awk -F'.' '{print $1}'
    echo $WORKER_TOKEN
    ```

    Switch to the Boundary Worker tab and add them in the code editor.

    Now, start the boundary-worker

    ```
    systemctl restart boundary-worker
    ```

    You can use the following command to check that your PKI worker was registered.
    ```
    boundary workers list -token env://BOUNDARY_TOKEN
    ```

    You can also use the following to troubleshoot systemd
    ```
    journalctl -u boundary-worker
    ```

    Now let's setup the Vault integration. This has to be done manually for now until the terraform provider is updated.
    https://github.com/hashicorp/terraform-provider-boundary/issues/294


    ```
    export CRED_STORE_ID=$(boundary credential-stores create vault \
      -scope-id $PROJECT_ID \
      -vault-address "http://vault-sql-server:8200" \
      -vault-token $BOUNDARY_VAULT_TOKEN \
      -worker-filter='"vault" in "/tags/type"' \
      -format json \
      -token env://BOUNDARY_TOKEN | jq -r '.item.id')
    ```

    POSTGRES DEMO

    ```
    export CRED_LIB_ID=$(boundary credential-libraries create vault \
      -credential-store-id $CRED_STORE_ID \
      -vault-path "database/creds/vault_go_demo" \
      -name "vault-cred-library-postgres" \
      -format json \
      -token env://BOUNDARY_TOKEN | jq -r '.item.id')

    boundary targets add-credential-sources \
      -id $POSTGRES_TARGET_ID \
      -brokered-credential-source $CRED_LIB_ID \
      -token env://BOUNDARY_TOKEN
    ```

    ```
    boundary targets authorize-session -id  $POSTGRS_TARGET_ID -token env://BOUNDARY_TOKEN
    boundary connect postgres -target-id $POSTGRES_TARGET_ID --dbname vault_go_demo -token env://BOUNDARY_TOKEN
    ```

    SSH INJECTED CREDS DEMO

    ```
    export CRED_LIB_ID_SSH=$(boundary credential-libraries create vault \
      -credential-store-id $CRED_STORE_ID \
      -vault-path "secret/data/my-secret" \
      -name "vault-cred-library-ssh" \
      -credential-type ssh_private_key \
      -format json \
      -token env://BOUNDARY_TOKEN | jq -r '.item.id')

    boundary targets add-credential-sources \
      -id $SSH_INJECTED_TARGET_ID \
      -injected-application-credential-source $CRED_LIB_ID_SSH \
      -token env://BOUNDARY_TOKEN
    ```
    ```
    boundary targets authorize-session -id  $SSH_INJECTED_TARGET_ID -token env://BOUNDARY_TOKEN
    boundary connect ssh -target-id $SSH_INJECTED_TARGET_ID -token env://BOUNDARY_TOKEN
    ```

    SSH STATIC CREDS (INTERNAL BOUNDARY CREDENTIAL STORE)
    ```
    boundary targets authorize-session -id $SSH_BROKERED_TARGET_ID
    ```
    ```
    boundary connect ssh -target-id $SSH_BROKERED_TARGET_ID
    ```


    VAULT ACCESS DEMO
    ```
    boundary connect -exec vault -target-id ttcp_nKDEWHXkdg -- secrets list
    ```
  tabs:
  - title: Boundary Worker
    type: terminal
    hostname: boundary-worker
  - title: Boundary Worker Editor
    type: code
    hostname: boundary-worker
    path: /etc/boundary.d/pki-worker.hcl
  - title: Terraform Editor
    type: code
    hostname: boundary-worker
    path: /root/terraform-boundary/main.tf
  - title: Vault UI
    type: service
    hostname: vault-sql-server
    port: 8200
  - title: Vault & SQL Server
    type: terminal
    hostname: vault-sql-server
  - title: Remote Desktop
    type: service
    hostname: guac
    path: /#/client/c/srv01?username=guac_user&password=guac_password
    port: 8080
  - title: Windows Server
    type: terminal
    hostname: windows-server
  - title: Windows Server 02
    type: terminal
    hostname: windows-server-02
  difficulty: basic
  timelimit: 172800
checksum: "12626697604425744568"
