slug: klaas-zt-sandbox
id: mjhgbj3a3yyb
version: 0.0.1
type: track
title: Klaas ZT sandbox
teaser: Leverage the HashiCorp stack to secure application infrastructure (ZT)
description: Description placeholder (ZT)
icon: ""
tags: []
owner: hashicorp
developers:
- aklaas@hashicorp.com
private: true
published: false
challenges:
- slug: 01-vault-aws-authentication
  id: oj6ydqgrfeob
  type: challenge
  title: Vault's AWS authentication method
  teaser: Test the various tool components
  notes:
  - type: text
    contents: First challenge placeholder text
  assignment: |-
    In this track, you will use Vault's AWS authentication method
    ```
    vault login -method=userpass username=vault password=vault
    ```

    ```
    vault auth list
    ```

    ```
    vault secrets list
    ```

    ```
    vault read auth/aws/config/client
    ```

    ```
    vault write auth/aws/role/my-role-iam \
      auth_type=iam \
      bound_iam_principal_arn=arn:aws:iam::$AWS_ACCOUNT_ID:* \
      policies=go-app \
      token_ttl=30m \
      token_max_ttl=30m
    ```

    ```
    vault read auth/aws/role/my-role-iam
    ```

    ```
    vault login -method=aws role=my-role-iam
    ```

    ```
    cat /tmp/aws-vault-go-demo-tokenization/config/db.go
    ```
  tabs:
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: App UI
    type: service
    hostname: hashistack-client-1
    port: 9090
  - title: Vault UI
    type: service
    hostname: hashistack-server
    port: 8200
  - title: Consul UI
    type: service
    hostname: hashistack-server
    port: 8500
  - title: Boundary UI
    type: service
    hostname: hashistack-server
    port: 9200
  - title: Client 1
    type: terminal
    hostname: hashistack-client-1
  - title: Client 2
    type: terminal
    hostname: hashistack-client-2
  - title: Terraform Editor
    type: code
    hostname: hashistack-server
    path: /root/terraform-boundary/main.tf
  difficulty: basic
  timelimit: 60000
- slug: 02-vault-dynamic-secrets
  id: kqyrabasn1cy
  type: challenge
  title: Vault dynamic secrets
  teaser: Test the various tool components
  notes:
  - type: text
    contents: First challenge placeholder text
  assignment: |-
    In this track, you will use Vault's database secret engine to generate dynamic credentials.
    ```
    vault secrets list
    ```

    ```
    vault read database/config/my-postgresql-database
    ```

    ```
    vault write database/roles/vault_go_demo \
      db_name=my-postgresql-database \
      creation_statements="CREATE ROLE \"{{name}}\" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}'; \
      ALTER USER \"{{name}}\" WITH SUPERUSER;" \
      default_ttl="1h" \
      max_ttl="24h"
    ```

    ```
    vault read database/creds/vault_go_demo
    ```
  tabs:
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: App UI
    type: service
    hostname: hashistack-client-1
    port: 9090
  - title: Vault UI
    type: service
    hostname: hashistack-server
    port: 8200
  - title: Consul UI
    type: service
    hostname: hashistack-server
    port: 8500
  - title: Boundary UI
    type: service
    hostname: hashistack-server
    port: 9200
  - title: Client 1
    type: terminal
    hostname: hashistack-client-1
  - title: Client 2
    type: terminal
    hostname: hashistack-client-2
  - title: Terraform Editor
    type: code
    hostname: hashistack-server
    path: /root/terraform-boundary/main.tf
  difficulty: basic
  timelimit: 60000
- slug: 03-vault-tokenization-eaas
  id: jqwymtoguy41
  type: challenge
  title: Vault Tokenization (Or EaaS)
  teaser: Test the various tool components
  notes:
  - type: text
    contents: First challenge placeholder text
  assignment: |-
    In this track, you will use Vault's Transform secret engine.
    ```
    vault write transform/role/vault_go_demo transformations=ssn
    ```

    ```
    vault write transform/transformations/tokenization/ssn \
      allowed_roles=vault_go_demo \
      max_ttl=24h
    ```

    ```
    vault read transform/role/vault_go_demo
    ```

    ```
    vault read transform/transformations/tokenization/ssn
    ```

    ```
    vault write transform/encode/vault_go_demo value=1111-2222-3333-4444 transformation=ssn
    ```

    ```
    vault write transform/decode/vault_go_demo value=$(ENCODED_VAULT) transformation=ssn
    ```
  tabs:
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: App UI
    type: service
    hostname: hashistack-client-1
    port: 9090
  - title: Vault UI
    type: service
    hostname: hashistack-server
    port: 8200
  - title: Consul UI
    type: service
    hostname: hashistack-server
    port: 8500
  - title: Boundary UI
    type: service
    hostname: hashistack-server
    port: 9200
  - title: Client 1
    type: terminal
    hostname: hashistack-client-1
  - title: Client 2
    type: terminal
    hostname: hashistack-client-2
  - title: Terraform Editor
    type: code
    hostname: hashistack-server
    path: /root/terraform-boundary/main.tf
  difficulty: basic
  timelimit: 60000
- slug: 04-test-app
  id: c5zycezukwae
  type: challenge
  title: Test the application
  teaser: Test the various tool components
  notes:
  - type: text
    contents: First challenge placeholder text
  assignment: |-
    Switch to the Client 1 terminal
    ```
    systemctl start goapp
    ```
    Now test the App UI by adding a customer Record.
  tabs:
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: App UI
    type: service
    hostname: hashistack-client-1
    port: 9090
  - title: Vault UI
    type: service
    hostname: hashistack-server
    port: 8200
  - title: Consul UI
    type: service
    hostname: hashistack-server
    port: 8500
  - title: Boundary UI
    type: service
    hostname: hashistack-server
    port: 9200
  - title: Client 1
    type: terminal
    hostname: hashistack-client-1
  - title: Client 2
    type: terminal
    hostname: hashistack-client-2
  - title: Terraform Editor
    type: code
    hostname: hashistack-server
    path: /root/terraform-boundary/main.tf
  difficulty: basic
  timelimit: 600
- slug: 05-consul-ui
  id: onnejylpe8tv
  type: challenge
  title: Explore the Consul UI
  teaser: Test the various tool components
  notes:
  - type: text
    contents: First challenge placeholder text
  assignment: Explore the Consul UI Tab. Check the Nodes and Services Tabs.
  tabs:
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: App UI
    type: service
    hostname: hashistack-client-1
    port: 9090
  - title: Vault UI
    type: service
    hostname: hashistack-server
    port: 8200
  - title: Consul UI
    type: service
    hostname: hashistack-server
    port: 8500
  - title: Boundary UI
    type: service
    hostname: hashistack-server
    port: 9200
  - title: Client 1
    type: terminal
    hostname: hashistack-client-1
  - title: Client 2
    type: terminal
    hostname: hashistack-client-2
  - title: Terraform Editor
    type: code
    hostname: hashistack-server
    path: /root/terraform-boundary/main.tf
  difficulty: basic
  timelimit: 600
- slug: 06-consul-services
  id: kiuymimbpn9n
  type: challenge
  title: Defining Consul Services
  teaser: Test the various tool components
  notes:
  - type: text
    contents: First challenge placeholder text
  assignment: |-
    Switch to the Client 1 terminal
    ```
    cd /etc/consul.d/
    cat consul.hcl
    ```

    ```
    cat goapp.hcl
    ```
    Switch to the Client 2 terminal
    ```
    cd /etc/consul.d/
    cat consul.hcl
    ```

    ```
    cat postgres.hcl
    ```

    ```
    consul catalog services
    ```
  tabs:
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: App UI
    type: service
    hostname: hashistack-client-1
    port: 9090
  - title: Vault UI
    type: service
    hostname: hashistack-server
    port: 8200
  - title: Consul UI
    type: service
    hostname: hashistack-server
    port: 8500
  - title: Boundary UI
    type: service
    hostname: hashistack-server
    port: 9200
  - title: Client 1
    type: terminal
    hostname: hashistack-client-1
  - title: Client 2
    type: terminal
    hostname: hashistack-client-2
  - title: Terraform Editor
    type: code
    hostname: hashistack-server
    path: /root/terraform-boundary/main.tf
  difficulty: basic
  timelimit: 600
- slug: 07-consul-dns
  id: 4ufy2zk3wj3d
  type: challenge
  title: Testing Consul DNS
  teaser: Test the various tool components
  notes:
  - type: text
    contents: First challenge placeholder text
  assignment: |-
    Test Consul DNS
    ```
    dig postgres.service.consul
    ```
  tabs:
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: App UI
    type: service
    hostname: hashistack-client-1
    port: 9090
  - title: Vault UI
    type: service
    hostname: hashistack-server
    port: 8200
  - title: Consul UI
    type: service
    hostname: hashistack-server
    port: 8500
  - title: Boundary UI
    type: service
    hostname: hashistack-server
    port: 9200
  - title: Client 1
    type: terminal
    hostname: hashistack-client-1
  - title: Client 2
    type: terminal
    hostname: hashistack-client-2
  - title: Terraform Editor
    type: code
    hostname: hashistack-server
    path: /root/terraform-boundary/main.tf
  difficulty: basic
  timelimit: 600
- slug: 08-define-consul-intentions
  id: 978rumtsfwey
  type: challenge
  title: Defining Consul Intentions (Network Policy)
  teaser: Test the various tool components
  notes:
  - type: text
    contents: First challenge placeholder text
  assignment: |-
    Client 1:
    ```
    cat goapp.hcl
    ```
    Client 2:
    ```
    cat postgres.hcl
    ```
    ```
    cat << EOF > ~/config-intentions-postgres-deny.hcl
    Kind = "service-intentions"
    Name = "postgres"
    Sources = [
      {
        Name   = "goapp"
        Action = "deny"
      },
      # NOTE: a default catch-all based on the default ACL policy will apply to
      # unmatched connections and requests. Typically this will be DENY.
    ]
    EOF
    consul config write config-intentions-postgres-deny.hcl
    ```
  tabs:
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: App UI
    type: service
    hostname: hashistack-client-1
    port: 9090
  - title: Vault UI
    type: service
    hostname: hashistack-server
    port: 8200
  - title: Consul UI
    type: service
    hostname: hashistack-server
    port: 8500
  - title: Boundary UI
    type: service
    hostname: hashistack-server
    port: 9200
  - title: Client 1
    type: terminal
    hostname: hashistack-client-1
  - title: Client 2
    type: terminal
    hostname: hashistack-client-2
  - title: Terraform Editor
    type: code
    hostname: hashistack-server
    path: /root/terraform-boundary/main.tf
  difficulty: basic
  timelimit: 600
- slug: 09-test-consul-intentions
  id: xslnysgv6mzj
  type: challenge
  title: Testing Consul Intentions
  teaser: Test the various tool components
  notes:
  - type: text
    contents: First challenge placeholder text
  assignment: |-
    Client 1:
    ```
    cat << EOF > ~/config-intentions-postgres-allow.hcl
    Kind = "service-intentions"
    Name = "postgres"
    Sources = [
      {
        Name   = "goapp"
        Action = "allow"
      },
      # NOTE: a default catch-all based on the default ACL policy will apply to
      # unmatched connections and requests. Typically this will be DENY.
    ]
    EOF
    consul config write config-intentions-postgres-allow.hcl
    ```
    ```
    systemctl restart goapp
    ```
    Test the Webapp
  tabs:
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: App UI
    type: service
    hostname: hashistack-client-1
    port: 9090
  - title: Vault UI
    type: service
    hostname: hashistack-server
    port: 8200
  - title: Consul UI
    type: service
    hostname: hashistack-server
    port: 8500
  - title: Boundary UI
    type: service
    hostname: hashistack-server
    port: 9200
  - title: Client 1
    type: terminal
    hostname: hashistack-client-1
  - title: Client 2
    type: terminal
    hostname: hashistack-client-2
  - title: Terraform Editor
    type: code
    hostname: hashistack-server
    path: /root/terraform-boundary/main.tf
  difficulty: basic
  timelimit: 600
- slug: 10-configure-boundary-and-vault
  id: j5btwrjmcgx5
  type: challenge
  title: Configure Boundary and Vault
  teaser: Test the various tool components
  notes:
  - type: text
    contents: First challenge placeholder text
  assignment: |-
    Client 1:
    ```
    vault login -method=userpass username=vault password=vault
    ```

    ```
    cd terraform-boundary/
    cat boundary-controller-policy.hcl
    ```

    ```
    vault policy write boundary-controller boundary-controller-policy.hcl
    vault token create \
      -no-default-policy=true \
      -policy="boundary-controller" \
      -policy="go-app"
      -orphan=true \
      -period=20m \
      -renewable=true
    ```

    ```
    #feed token to terraform
    terraform init;
    terraform apply --auto-approve;
    ```
  tabs:
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: App UI
    type: service
    hostname: hashistack-client-1
    port: 9090
  - title: Vault UI
    type: service
    hostname: hashistack-server
    port: 8200
  - title: Consul UI
    type: service
    hostname: hashistack-server
    port: 8500
  - title: Boundary UI
    type: service
    hostname: hashistack-server
    port: 9200
  - title: Client 1
    type: terminal
    hostname: hashistack-client-1
  - title: Client 2
    type: terminal
    hostname: hashistack-client-2
  - title: Terraform Editor
    type: code
    hostname: hashistack-server
    path: /root/terraform-boundary/main.tf
  difficulty: basic
  timelimit: 600
- slug: 11-boundary-ui
  id: nd6xsy348mhi
  type: challenge
  title: Explore the Boundary UI
  teaser: Test the various tool components
  notes:
  - type: text
    contents: First challenge placeholder text
  assignment: |-
    Login to Boundary and explore the UI
    ```
    username: admin
    password: password
    ```
    Navigate to the corp_one org then to targets. Note the different targets we can access.
    Copy the Postgres_server Target. We will access this in the next challenge.
  tabs:
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: App UI
    type: service
    hostname: hashistack-client-1
    port: 9090
  - title: Vault UI
    type: service
    hostname: hashistack-server
    port: 8200
  - title: Consul UI
    type: service
    hostname: hashistack-server
    port: 8500
  - title: Boundary UI
    type: service
    hostname: hashistack-server
    port: 9200
  - title: Client 1
    type: terminal
    hostname: hashistack-client-1
  - title: Client 2
    type: terminal
    hostname: hashistack-client-2
  - title: Terraform Editor
    type: code
    hostname: hashistack-server
    path: /root/terraform-boundary/main.tf
  difficulty: basic
  timelimit: 600
- slug: 12-connect-to-database
  id: v5hh6i7cg6ej
  type: challenge
  title: Leverage Boundary to securely connect to PostgreSQL
  teaser: Test the various tool components
  notes:
  - type: text
    contents: First challenge placeholder text
  assignment: |-
    Login to Boundary and explore the UI
    ```
    export BOUNDARY_TOKEN=$(boundary authenticate password -auth-method-id ampw_1234567890 -login-name admin -password "password" -keyring-type=none -format=json | jq -r '.item.attributes.token')
    echo $BOUNDARY_TOKEN
    ```

    ```
    #Copy the postgres_server target from the corp_one org
    export POSTGRES_TARGET=ttcp_uJw5GWOygZ
    ```

    ```
    boundary targets authorize-session -id  $POSTGRES_TARGET
    ```

    ```
    boundary connect postgres -target-id $POSTGRES_TARGET --dbname vault_go_demo
    ```

    ```
    # SSH: ssh_server target (client2)
    export SSH_TARGET=
    ```

    ```
    boundary connect ssh -target-id $SSH_TARGET
    ```
  tabs:
  - title: Server
    type: terminal
    hostname: hashistack-server
  - title: App UI
    type: service
    hostname: hashistack-client-1
    port: 9090
  - title: Vault UI
    type: service
    hostname: hashistack-server
    port: 8200
  - title: Consul UI
    type: service
    hostname: hashistack-server
    port: 8500
  - title: Boundary UI
    type: service
    hostname: hashistack-server
    port: 9200
  - title: Client 1
    type: terminal
    hostname: hashistack-client-1
  - title: Client 2
    type: terminal
    hostname: hashistack-client-2
  - title: Terraform Editor
    type: code
    hostname: hashistack-server
    path: /root/terraform-boundary/main.tf
  difficulty: basic
  timelimit: 600
checksum: "15732195201505676249"
