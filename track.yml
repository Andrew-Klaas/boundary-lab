slug: klaas-boundary-sandbox
id: fmjg5mbiv8rw
version: 0.0.1
title: (WIP) Test Boundary PKI Workers and Target Types
teaser: (WIP) Boundary Demo env (NOT READY)
description: (WIP) Test Boundary PKI Workers and Target Types
icon: https://storage.googleapis.com/instruqt-hashicorp-tracks/logo/HashiCorp_Icon_Black.png
tags:
- Vault
- Boundary
owner: hashicorp
developers:
- aklaas@hashicorp.com
private: true
published: false
challenges:
- slug: 01-boundary-worker-setup
  id: efkilv6revt0
  type: challenge
  title: Configure Boundary and Vault
  teaser: Configure Vault to issue credentials for Boundary.
  notes:
  - type: text
    contents: Boundary provides a secure way to access hosts and critical systems
      without having to manage credentials or expose your network.
  assignment: |-
    Login to Vault on using the "Server" tab
    ```
    vault login -method=userpass username=vault password=vault
    ```
    Next, we will configure Boundary using HashiCorp Terraform.

    Terraform is an open-source infrastructure as code software tool that enables you to safely and predictably create, change, and improve infrastructure.

    Change into the terraform-boundary directory where our Terraform config is stored
    ```
    cd terraform-boundary/
    cat boundary-controller-policy.hcl
    ```
    Boundary needs to lookup, renew, and revoke tokens and leases in order to broker credentials from Vault properly.

    Next, we will create a Vault token for the Boundary Server to use.

    ```
    vault policy write boundary-controller boundary-controller-policy.hcl
    vault token create \
      -no-default-policy=true \
      -policy="boundary-controller" \
      -policy="go-app" \
      -orphan=true \
      -period=20m \
      -renewable=true
    ```

    Save the "token" from the above output. You will pass this value to Terraform in the "apply" step below.
    ```
    #example: Save this from above. You will pass it to Terraform apply.
    s.5DyL8vhy0AA3ke42WbWG4r5A
    ```

    Initialize terraform.
    ```
    #feed token to terraform
    terraform init;
    ```
    Once satisified, apply the configuration. You will need to pass the Vault token from above to the Terraform CLI command.
    ```
    terraform apply --auto-approve;
    ```

    Once Terraform successfully configures Boundary, we can move on to the next challenge.
    ```
    apply complete! Resources: 20 added, 0 changed, 0 destroyed.
    ```
  tabs:
  - title: Boundary Worker
    type: terminal
    hostname: boundary-worker
  - title: Vault UI
    type: service
    hostname: vault-sql-server
    port: 8200
  - title: Vault & SQL Server
    type: terminal
    hostname: vault-sql-server
  - title: Windows Server
    type: terminal
    hostname: windows-server
  - title: Terraform Editor
    type: code
    hostname: hashistack-server
    path: /root/terraform-boundary/main.tf
  difficulty: basic
  timelimit: 6000
checksum: "7102524342275751858"
