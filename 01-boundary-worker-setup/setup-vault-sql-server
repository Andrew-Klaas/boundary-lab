#!/bin/bash
set -e
set -v

until [ -f /opt/instruqt/bootstrap/host-bootstrap-completed ]
do
    sleep 1
done
echo "source /usr/share/bash-completion/bash_completion" >> /root/.bashrc

VAULT_VERSION=1.7.4
TERRAFORM_VERSION=1.0.7
CONSUL_VERSION=1.10.2
BOUNDARY_VERSION=0.6.1
BOUNDARY_WORKER_VERSION=0.11.0

# Install Vault
curl -fsSL -o /tmp/vault.zip "https://releases.hashicorp.com/vault/${VAULT_VERSION}+ent/vault_${VAULT_VERSION}+ent_linux_amd64.zip"
unzip -o -d /usr/local/bin/ /tmp/vault.zip

# Install Terraform
curl -fsSL -o /tmp/terraform.zip "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
unzip -o -d /usr/local/bin/ /tmp/terraform.zip



cd /tmp
git clone https://github.com/Andrew-Klaas/boundary-lab.git




cp boundary-lab/assets/systemd-files/consul.service /etc/systemd/system/consul.service

mkdir /etc/consul.d
mkdir /tmp/consul

systemctl daemon-reload
systemctl enable consul.service

####################################
# Configure Consul Server
####################################
HOST_IP_ADDR=$(ifconfig ens4 | grep "inet " | awk '{ print$2 }')
cat << EOF > /etc/consul.d/consul.hcl
datacenter = "dc1"
retry_join = ["hashistack-server"]
retry_interval = ["5s"]
data_dir = "/tmp/consul"
server = false
log_level = "DEBUG"
node_name = "hashistack-client-2"
bind_addr = "$HOST_IP_ADDR"
client_addr = "$HOST_IP_ADDR 127.0.0.1"
ui = true
ports {
  grpc = 8502
}
EOF

apt update -y 
apt install -y dnsmasq
sed -i '1i nameserver 127.0.0.1\n' /etc/resolv.conf
bash -c "cat >/etc/dnsmasq.d/10-consul" << EOF
server=/consul/$HOST_IP_ADDR#8600
EOF

systemctl start consul
systemctl enable dnsmasq
sleep 10s
systemctl restart systemd-resolved
systemctl restart dnsmasq

echo "Consul install complete" >> /tmp/install.log

####################################
# Configure PostgreSQL
####################################

sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
apt-get -y update
sudo apt-get -y install postgresql
systemctl start postgresql
sudo cat << EOF > /etc/postgresql/14/main/conf.d/postgresql.conf
listen_addresses '*'
EOF
sudo echo "
host    all             all              0.0.0.0/0                       md5
host    all             all              ::/0                            md5
" >> /etc/postgresql/14/main/pg_hba.conf
systemctl restart postgresql

sudo -u postgres psql << EOF
ALTER USER postgres PASSWORD 'password';
CREATE DATABASE vault_go_demo;
EOF


####################################
# Configure Vault Server
####################################
cat << EOF > /etc/vault.d/vault.hcl
storage "file" {
  path = "/tmp/vault/data"
}
listener "tcp" {
  address     = "0.0.0.0:8200"
  tls_disable = 1
}
# service_registration "consul" {
#   address = "$HOST_IP_ADDR:8500"
# }
api_addr = "http://$HOST_IP_ADDR:8200"
cluster_addr = "https://$HOST_IP_ADDR:8201"
ui = true
EOF

systemctl start vault

sleep 5s

vault operator init -key-shares=1  -key-threshold=1 --format json >> init.txt
ROOT_TOKEN=$(cat init.txt | jq -r .root_token)
UNSEAL_KEY=$(cat init.txt | jq -r .unseal_keys_b64[0])

vault operator unseal $UNSEAL_KEY
vault login $ROOT_TOKEN

#Create admin user
echo '
path "*" {
    capabilities = ["create", "read", "update", "delete", "list", "sudo"]
}' | vault policy write vault_admin -
vault auth enable userpass
vault write auth/userpass/users/vault password=vault policies=vault_admin

vault secrets enable transform
vault write transform/role/vault_go_demo transformations=ssn
vault write transform/transformations/tokenization/ssn \
    allowed_roles=vault_go_demo \
    max_ttl=24h

cat << EOF > go-app.policy
path "transform/*" {
  capabilities = ["read", "list", "create", "update", "delete"]
}
path "database/creds/vault_go_demo" {
  capabilities = ["read"]
}
path "*" {
 capabilities = ["read", "list", "create", "update", "delete"]
}
EOF
vault policy write go-app go-app.policy


# echo $INSTRUQT_AWS_ACCOUNTS
export AWS_ACCESS_KEY_ID=$INSTRUQT_AWS_ACCOUNT_VAULT_DYNAMIC_SECRETS_AWS_AWS_ACCESS_KEY_ID
export AWS_SECRET_ACCESS_KEY=$INSTRUQT_AWS_ACCOUNT_VAULT_DYNAMIC_SECRETS_AWS_AWS_SECRET_ACCESS_KEY
export AWS_ACCOUNT_NAME=$INSTRUQT_AWS_ACCOUNT_VAULT_DYNAMIC_SECRETS_AWS_ACCOUNT_NAME
export AWS_ACCOUNT_ID=$INSTRUQT_AWS_ACCOUNT_VAULT_DYNAMIC_SECRETS_AWS_ACCOUNT_ID
export AWS_ACCOUNT_USERNAME=$INSTRUQT_AWS_ACCOUNT_VAULT_DYNAMIC_SECRETS_AWS_USERNAME
export AWS_ACCOUNT_PASSWORD=$INSTRUQT_AWS_ACCOUNT_VAULT_DYNAMIC_SECRETS_AWS_PASSWORD

vault auth enable aws

# Configure Vault to communicate with the AWS account
vault write auth/aws/config/client \
    access_key=$AWS_ACCESS_KEY_ID \
    secret_key=$AWS_SECRET_ACCESS_KEY

# Register a role in the method
vault write auth/aws/role/my-role-iam \
    auth_type=iam \
    bound_iam_principal_arn=arn:aws:iam::$AWS_ACCOUNT_ID:* \
    policies=go-app \
    token_ttl=30m \
    token_max_ttl=30m

# Set the IAM Server ID Expected Header Value
#vault write auth/aws/config/client \
#    iam_server_id_header_value=instruqt.vault.example.com

db_service_avail="null"
while [ "${db_service_avail}" == "null" ] ; do
  echo "Waiting for postgres to be available"
  sleep 5s
  db_service_avail=$(curl --silent "http://localhost:8500/v1/catalog/services" | jq -r '.postgres')
done
sleep 5s

vault secrets enable database

vault write database/config/my-postgresql-database \
plugin_name=postgresql-database-plugin \
allowed_roles="my-role, vault_go_demo" \
connection_url="postgresql://{{username}}:{{password}}@postgres.service.consul:5432/vault_go_demo?sslmode=disable" \
username="postgres" \
password="password"

vault write database/roles/vault_go_demo \
db_name=my-postgresql-database \
creation_statements="CREATE ROLE \"{{name}}\" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}'; \
ALTER USER \"{{name}}\" WITH SUPERUSER;" \
default_ttl="1h" \
max_ttl="24h"

vault read database/creds/vault_go_demo

echo "Vault install complete" >> /tmp/install.log


exit 0